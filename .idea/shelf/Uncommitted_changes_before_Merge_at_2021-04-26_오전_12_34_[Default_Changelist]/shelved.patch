Index: controller/BlogController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nnamespace BlogPHP\\Controller;\r\nuse BlogPHP\\Model\\Authentication;\r\nuse BlogPHP\\Model\\Post;\r\n\r\n/**\r\n * Class BlogController\r\n * @package BlogPHP\\Controller\r\n */\r\nclass BlogController {\r\n\t\r\n\tprotected $manager, $modelPost, $modelAuthentication;\r\n    private $id;\r\n\r\n\r\n    /**\r\n     * BlogController constructor.\r\n     */\r\n    public function __construct() {\r\n        $this->manager = new \\BlogPHP\\app\\BlogManager;\r\n        // Get the Model class in order for it to be used directly in all of this Controller\r\n        $this->manager->getModel('Post');\r\n        $this->manager->getModel('Authentication');\r\n        $this->modelPost = new Post();\r\n        $this->modelAuthentication = new Authentication();\r\n        // The ID of the post directly in the constructor\r\n\t\tif(empty($_GET['id'])){\r\n\t\t\t$this->id = 0;\r\n\t\t} else {\r\n\t\t\t$this->id = (int) $_GET['id']; // The cast is used to double check that the id is indeed an integer\r\n\t\t}\r\n    }\r\n\r\n    /**\r\n     * Generation of the homepage.\r\n     */\r\n\tpublic function home() {\r\n\t\t$this->manager->post = $this->modelPost->getAll();\r\n        $this->manager->getView('home');\r\n    }\r\n\r\n    /**\r\n     * Generation of the all blog posts.\r\n     */\r\n    public function blogPosts() {\r\n        $this->manager->posts = $this->modelPost->getAll(); // Get all the posts\r\n        $this->manager->getView('blogPosts');\r\n    }\r\n\r\n    /**\r\n     * Generation of a specific blog post.\r\n     */\r\n    public function post() {\r\n        $this->manager->post = $this->modelPost->getById($this->id); // Get the specific post using it's ID\r\n        $this->manager->getView('post');\r\n    }\r\n\r\n    /**\r\n     * Generation of the not found page.\r\n     */\r\n    public function notFound() {\r\n        $this->manager->getView('404');\r\n    }\r\n\r\n    /**\r\n     * Generation of the add post page where we're able to create a new post.\r\n     */\r\n    public function add() {\r\n        if (!empty($_POST['add_submit'])) { // Making sure that the sumbit button is coming from the add.php page (containing the add_submit button) {\r\n            if (isset($_POST['title'], $_POST['small_desc'], $_POST['content'], $_POST['author']) && mb_strlen($_POST['title']) <= 50 && !empty($_POST['title']) && !empty($_POST['small_desc']) && !empty($_POST['content']) && !empty($_POST['author'])) { // Allow a maximum of 50 characters and making sure the input we get is not empty (a bit equal to required=\"required\" in the HTML form, but who trusts HTML anyways? :D)\r\n                if(!ctype_space($_POST['title']) && !ctype_space($_POST['small_desc']) && !ctype_space($_POST['content']) && !ctype_space($_POST['author'])) { // Making sure there's a contact in the input we got that is not all full spaces\r\n\t\t\t\t\tif(mb_strlen($_POST['title']) >= 3 && mb_strlen($_POST['small_desc']) >= 3 && mb_strlen($_POST['content']) >= 3 && mb_strlen($_POST['author']) >= 3) { // Making sure each input is more than 3 characters\r\n\t\t\t\t\t\tif(preg_match('/\\s/',$_POST['small_desc']) >= 1 && preg_match('/\\s/',$_POST['content']) >= 1) { // Making sure content and the small description are more than 1 word\r\n\t\t\t\t\t\t\t$data = array('title' => htmlspecialchars($_POST['title']), 'small_desc' => htmlspecialchars($_POST['small_desc']), 'content' => htmlspecialchars($_POST['content']), 'author' => htmlspecialchars($_POST['author']));\r\n\t\t\t\t\t\t\tif ($this->modelPost->add($data)) {\r\n\t\t\t\t\t\t\t\t$this->manager->msgSuccess = 'The post was added with success.';\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t$this->manager->msgError = 'An error has occured. Please contact the site admin.';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$this->manager->msgError = 'The small description and/or content can\\'t be consisted of only 1 word. 2 words minimum.';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$this->manager->msgError = 'Minimum 3 letters required for each field.';\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$this->manager->msgError = 'Please don\\'t fill any of the fields with blank spaces.';\r\n\t\t\t\t}\r\n            } else {\r\n\t\t\t\t// Might not be required, as we're already checking inside the html that everything is okay, but double checking is always nice.\r\n                $this->manager->msgError = 'Kindly fill all of the required fields before you submit, and make sure the title is less than 50 characters!';\r\n            }\r\n        }\r\n        $this->manager->getView('add');\r\n    }\r\n\r\n    /**\r\n     * Generation of the edit post page where we're able to update an existing post.\r\n     */\r\n    public function edit() {\r\n        if (!empty($_POST['edit_submit'])) { // Making sure that the sumbit button is coming from the edit.php page (containing the edit_submit button)\r\n            if (isset($_POST['title'], $_POST['small_desc'], $_POST['content'], $_POST['author']) && mb_strlen($_POST['title']) <= 50 && !empty($_POST['title']) && !empty($_POST['small_desc']) && !empty($_POST['content']) && !empty($_POST['author'])) {\r\n\t\t\t\tif(!ctype_space($_POST['title']) && !ctype_space($_POST['small_desc']) && !ctype_space($_POST['content']) && !ctype_space($_POST['author'])) {\r\n\t\t\t\t\tif(mb_strlen($_POST['title']) >= 3 && mb_strlen($_POST['small_desc']) >= 3 && mb_strlen($_POST['content']) >= 3 && mb_strlen($_POST['author']) >= 3) {\r\n\t\t\t\t\t    if(preg_match('/\\s/',$_POST['small_desc']) >= 1 && preg_match('/\\s/',$_POST['content']) >= 1) { // Making sure content and the small description are more than 1 word\r\n\t\t\t\t\t\t\t$data = array('postId' => $this->id, 'title' => htmlspecialchars($_POST['title']), 'small_desc' => htmlspecialchars($_POST['small_desc']), 'content' => htmlspecialchars($_POST['content']), 'author' => htmlspecialchars($_POST['author']) );\r\n\t\t\t\t\t\t\tif ($this->modelPost->update($data)) {\r\n\t\t\t\t\t\t\t\t$this->manager->msgSuccess = 'The post was updated with success.';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t$this->manager->msgError = 'An error has occured. Please contact the site admin.';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$this->manager->msgError = 'The small description and/or content can\\'t be consisted of only 1 word. 2 words minimum.';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$this->manager->msgError = 'Minimum 3 letters required.';\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$this->manager->msgError = 'Please don\\'t fill any of the fields with blank spaces.';\r\n\t\t\t\t}\r\n            }\r\n            else {\r\n                $this->manager->msgError = 'Kindly fill all of the required fields before you submit, and make sure the title is less than 50 characters!';\r\n            }\r\n        }\r\n\t\t\r\n\t\t// We get the data of the post\r\n        $this->manager->post = $this->modelPost->getById($this->id);\r\n\t\t\r\n        $this->manager->getView('edit');\r\n    }\r\n\r\n    /**\r\n     * Generation of the delete post button.\r\n     */\r\n    public function delete(){\r\n        if (empty($_POST['delete']) && $this->modelPost->delete($this->id)) {\r\n            header('Location: ' . ROOT_URL);\r\n\t\t}\r\n        else {\r\n            exit('Whoops! Post cannot be deleted.');\r\n\t\t}\r\n    }\r\n\r\n    /**\r\n     * Generation of the login page.\r\n     */\r\n    public function login() {\r\n        if (!empty($_SESSION)) {\r\n            header('Location: ' . ROOT_URL);\r\n            exit();\r\n        } else if (isset($_POST['username'], $_POST['password'])) {\r\n            if($this->modelAuthentication->getAuthentication($_POST['username'], $_POST['password'])) {\r\n                session_start();\r\n                $_SESSION['active'] = $_POST['username'];\r\n                header('Location: ' . ROOT_URL);\r\n                exit();\r\n            } else {\r\n                $this->manager->msgError = 'Your login credentials are incorrect. Please try again later.';\r\n            }\r\n        }\r\n        $this->manager->getView('login');\r\n    }\r\n\r\n    /**\r\n     * Generation of the logout page.\r\n     */\r\n    public function logout() {\r\n        if (empty($_SESSION)) {\r\n            header('Location: ' . ROOT_URL);\r\n            exit();\r\n        } else if (!empty($_SESSION)) {\r\n            $_SESSION = array();\r\n            session_unset($_SESSION);\r\n            session_destroy();\r\n            setcookie(session_name(),'',0,'/');\r\n        }\r\n        $this->manager->getView('logout');\r\n    }\r\n\r\n    public function changePwd() {\r\n        if (!empty($_POST['change_submit'])) { // Making sure that the sumbit button is coming from the change_password.php page (containing the change_submit button)\r\n            if (isset($_POST['newPassword']) && mb_strlen($_POST['newPassword']) >= 10 && !empty($_POST['newPassword'])) {\r\n                if(!ctype_space($_POST['newPassword'])) {\r\n                    $password = htmlspecialchars($_POST['newPassword']);\r\n                    if ($this->modelAuthentication->setAuthentication($password)) {\r\n                         $this->manager->msgSuccess = 'The password was updated with success.';\r\n                    } else {\r\n                        $this->manager->msgError = 'An error has occured. Please contact the site admin.';\r\n                    }\r\n                } else {\r\n                    $this->manager->msgError = 'Please don\\'t have your password consisted of only blank spaces...';\r\n                }\r\n            }\r\n            else {\r\n                $this->manager->msgError = 'Password needs to be more than 9 characters.';\r\n            }\r\n        }\r\n        $this->manager->getView('change_password');\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controller/BlogController.php b/controller/BlogController.php
--- a/controller/BlogController.php	(revision dd8f2b41088f91d7db3db25536375cce102bd8f3)
+++ b/controller/BlogController.php	(date 1619364537053)
@@ -1,5 +1,6 @@
 <?php
 namespace BlogPHP\Controller;
+
 use BlogPHP\Model\Authentication;
 use BlogPHP\Model\Post;
 
@@ -8,7 +9,7 @@
  * @package BlogPHP\Controller
  */
 class BlogController {
-	
+
 	protected $manager, $modelPost, $modelAuthentication;
     private $id;
 
@@ -21,8 +22,8 @@
         // Get the Model class in order for it to be used directly in all of this Controller
         $this->manager->getModel('Post');
         $this->manager->getModel('Authentication');
-        $this->modelPost = new Post();
-        $this->modelAuthentication = new Authentication();
+        //$this->modelPost = new Post();
+        //$this->modelAuthentication = new Authentication();
         // The ID of the post directly in the constructor
 		if(empty($_GET['id'])){
 			$this->id = 0;
@@ -35,6 +36,7 @@
      * Generation of the homepage.
      */
 	public function home() {
+        $this->modelPost = new Post();
 		$this->manager->post = $this->modelPost->getAll();
         $this->manager->getView('home');
     }
@@ -43,6 +45,7 @@
      * Generation of the all blog posts.
      */
     public function blogPosts() {
+        $this->modelPost = new Post();
         $this->manager->posts = $this->modelPost->getAll(); // Get all the posts
         $this->manager->getView('blogPosts');
     }
@@ -51,6 +54,7 @@
      * Generation of a specific blog post.
      */
     public function post() {
+        $this->modelPost = new Post();
         $this->manager->post = $this->modelPost->getById($this->id); // Get the specific post using it's ID
         $this->manager->getView('post');
     }
@@ -66,6 +70,7 @@
      * Generation of the add post page where we're able to create a new post.
      */
     public function add() {
+        $this->modelPost = new Post();
         if (!empty($_POST['add_submit'])) { // Making sure that the sumbit button is coming from the add.php page (containing the add_submit button) {
             if (isset($_POST['title'], $_POST['small_desc'], $_POST['content'], $_POST['author']) && mb_strlen($_POST['title']) <= 50 && !empty($_POST['title']) && !empty($_POST['small_desc']) && !empty($_POST['content']) && !empty($_POST['author'])) { // Allow a maximum of 50 characters and making sure the input we get is not empty (a bit equal to required="required" in the HTML form, but who trusts HTML anyways? :D)
                 if(!ctype_space($_POST['title']) && !ctype_space($_POST['small_desc']) && !ctype_space($_POST['content']) && !ctype_space($_POST['author'])) { // Making sure there's a contact in the input we got that is not all full spaces
@@ -98,6 +103,7 @@
      * Generation of the edit post page where we're able to update an existing post.
      */
     public function edit() {
+        $this->modelPost = new Post();
         if (!empty($_POST['edit_submit'])) { // Making sure that the sumbit button is coming from the edit.php page (containing the edit_submit button)
             if (isset($_POST['title'], $_POST['small_desc'], $_POST['content'], $_POST['author']) && mb_strlen($_POST['title']) <= 50 && !empty($_POST['title']) && !empty($_POST['small_desc']) && !empty($_POST['content']) && !empty($_POST['author'])) {
 				if(!ctype_space($_POST['title']) && !ctype_space($_POST['small_desc']) && !ctype_space($_POST['content']) && !ctype_space($_POST['author'])) {
@@ -116,7 +122,7 @@
 					} else {
 						$this->manager->msgError = 'Minimum 3 letters required.';
 					}
-					
+
 				} else {
 					$this->manager->msgError = 'Please don\'t fill any of the fields with blank spaces.';
 				}
@@ -125,10 +131,10 @@
                 $this->manager->msgError = 'Kindly fill all of the required fields before you submit, and make sure the title is less than 50 characters!';
             }
         }
-		
+
 		// We get the data of the post
         $this->manager->post = $this->modelPost->getById($this->id);
-		
+
         $this->manager->getView('edit');
     }
 
@@ -136,6 +142,7 @@
      * Generation of the delete post button.
      */
     public function delete(){
+        $this->modelPost = new Post();
         if (empty($_POST['delete']) && $this->modelPost->delete($this->id)) {
             header('Location: ' . ROOT_URL);
 		}
@@ -148,6 +155,7 @@
      * Generation of the login page.
      */
     public function login() {
+        $this->modelAuthentication = new Authentication();
         if (!empty($_SESSION)) {
             header('Location: ' . ROOT_URL);
             exit();
@@ -164,10 +172,32 @@
         $this->manager->getView('login');
     }
 
+		/**
+		 * Generation of the subscription page.
+		 */
+		public function subscription() {
+            $this->modelAuthentication = new Authentication();
+				if (!empty($_SESSION)) {
+						header('Location: ' . ROOT_URL);
+						exit();
+				} else if (isset($_POST['username'], $_POST['password'])) {
+						if($this->modelAuthentication->getAuthentication($_POST['username'], $_POST['password'])) {
+								session_start();
+								$_SESSION['active'] = $_POST['username'];
+								header('Location: ' . ROOT_URL);
+								exit();
+						} else {
+								$this->manager->msgError = 'Your login credentials are incorrect. Please try again later.';
+						}
+				}
+				$this->manager->getView('subscription');
+		}
+
     /**
      * Generation of the logout page.
      */
     public function logout() {
+        $this->modelAuthentication = new Authentication();
         if (empty($_SESSION)) {
             header('Location: ' . ROOT_URL);
             exit();
@@ -181,6 +211,7 @@
     }
 
     public function changePwd() {
+        $this->modelAuthentication = new Authentication();
         if (!empty($_POST['change_submit'])) { // Making sure that the sumbit button is coming from the change_password.php page (containing the change_submit button)
             if (isset($_POST['newPassword']) && mb_strlen($_POST['newPassword']) >= 10 && !empty($_POST['newPassword'])) {
                 if(!ctype_space($_POST['newPassword'])) {
